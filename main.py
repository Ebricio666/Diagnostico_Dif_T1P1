import streamlit as st
import random

st.set_page_config(page_title="Banco de ejercicios: n√∫meros", page_icon="üßÆ", layout="centered")

# -----------------------------
# Reglas did√°cticas usadas
# -----------------------------
# - Considera "n√∫meros naturales" como 1, 2, 3, ... (sin incluir el cero).
# - Un n√∫mero entero puede ser negativo, cero o positivo (‚Ä¶,-2,-1,0,1,2,‚Ä¶).
# - Un n√∫mero racional puede escribirse como fracci√≥n de enteros (incluye decimales finitos y peri√≥dicos).
# - Un n√∫mero irracional no puede escribirse como fracci√≥n de enteros (decimales infinitos no peri√≥dicos).
# - 4/0 no es un n√∫mero real (no est√° definido).

# Utilidad: barajar manteniendo "No s√©, no recuerdo" al final
def shuffled_with_idk(options3):
    opts = options3[:]  # copia
    random.shuffle(opts)
    opts.append("No s√©, no recuerdo")
    return opts

# Base de ejercicios (12)
# Cada ejercicio: enunciado, nivel, opciones3 (tres primeras sin "No s√©, no recuerdo"),
# y la respuesta correcta entre esas tres.
EXERCISES = [
    # --- MUY F√ÅCIL ---
    {
        "nivel": "muy f√°cil",
        "enunciado": "¬øCu√°l es la mejor clasificaci√≥n para el n√∫mero 7?",
        "opciones3": ["N√∫mero natural", "Entero negativo", "N√∫mero irracional"],
        "correcta": "N√∫mero natural",
        "nota": "Los naturales comienzan en 1 y suben: 1, 2, 3, ‚Ä¶"
    },
    {
        "nivel": "muy f√°cil",
        "enunciado": "¬øCu√°l es la mejor clasificaci√≥n para el n√∫mero ‚àí3?",
        "opciones3": ["Entero negativo", "N√∫mero natural", "N√∫mero irracional"],
        "correcta": "Entero negativo",
        "nota": "Los enteros incluyen negativos, cero y positivos."
    },
    {
        "nivel": "muy f√°cil",
        "enunciado": "¬øCu√°l es la mejor clasificaci√≥n para el n√∫mero 1/2?",
        "opciones3": ["N√∫mero racional", "N√∫mero natural", "N√∫mero irracional"],
        "correcta": "N√∫mero racional",
        "nota": "Un racional puede escribirse como fracci√≥n de enteros."
    },
    {
        "nivel": "muy f√°cil",
        "enunciado": "La ra√≠z cuadrada de 9 es 3. ¬øC√≥mo clasificas ese resultado?",
        "opciones3": ["Entero positivo", "N√∫mero irracional", "N√∫mero natural"],
        "correcta": "Entero positivo",
        "nota": "El resultado es 3, que tambi√©n es natural, pero la mejor etiqueta aqu√≠ es entero positivo."
    },

    # --- F√ÅCIL ---
    {
        "nivel": "f√°cil",
        "enunciado": "¬øC√≥mo clasificas ‚àö2?",
        "opciones3": ["N√∫mero irracional", "N√∫mero racional", "Entero positivo"],
        "correcta": "N√∫mero irracional",
        "nota": "Su decimal es infinito no peri√≥dico."
    },
    {
        "nivel": "f√°cil",
        "enunciado": "¬øCu√°l es la mejor clasificaci√≥n para el n√∫mero 0?",
        "opciones3": ["N√∫mero entero", "N√∫mero natural", "N√∫mero irracional"],
        "correcta": "N√∫mero entero",
        "nota": "Aqu√≠ consideramos que 0 no es natural."
    },
    {
        "nivel": "f√°cil",
        "enunciado": "¬øC√≥mo clasificas ‚àí7.25?",
        "opciones3": ["N√∫mero racional", "N√∫mero irracional", "Entero negativo"],
        "correcta": "N√∫mero racional",
        "nota": "Es un decimal finito, por lo tanto racional."
    },
    {
        "nivel": "f√°cil",
        "enunciado": "¬øC√≥mo clasificas 25/5?",
        "opciones3": ["N√∫mero entero", "N√∫mero irracional", "N√∫mero racional"],
        "correcta": "N√∫mero entero",
        "nota": "25/5 = 5, que es un entero."
    },

    # --- PARA PENSAR ---
    {
        "nivel": "para pensar",
        "enunciado": "¬øC√≥mo clasificas 0.333... (con el 3 repiti√©ndose sin fin)?",
        "opciones3": ["N√∫mero racional", "N√∫mero irracional", "N√∫mero natural"],
        "correcta": "N√∫mero racional",
        "nota": "Es un decimal peri√≥dico, por lo tanto racional (1/3)."
    },
    {
        "nivel": "para pensar",
        "enunciado": "¬øC√≥mo clasificas ‚àí‚àö(16)?",
        "opciones3": ["Entero negativo", "N√∫mero irracional", "N√∫mero natural"],
        "correcta": "Entero negativo",
        "nota": "‚àí‚àö(16) = ‚àí4, que es un entero negativo."
    },
    {
        "nivel": "para pensar",
        "enunciado": "¬øC√≥mo clasificas œÄ (pi)?",
        "opciones3": ["N√∫mero irracional", "N√∫mero racional", "N√∫mero entero"],
        "correcta": "N√∫mero irracional",
        "nota": "Su decimal es infinito no peri√≥dico."
    },
    {
        "nivel": "para pensar",
        "enunciado": "¬øC√≥mo clasificas 4/0?",
        "opciones3": ["No es un n√∫mero real", "N√∫mero racional", "N√∫mero irracional"],
        "correcta": "No es un n√∫mero real",
        "nota": "La divisi√≥n entre cero no est√° definida en los n√∫meros reales."
    },
]

# Inicializar estado
if "respuestas" not in st.session_state:
    st.session_state.respuestas = [None] * len(EXERCISES)
if "calificado" not in st.session_state:
    st.session_state.calificado = False

st.title("üßÆ Banco de ejercicios: n√∫meros naturales, enteros, racionales e irracionales")

with st.expander("Instrucciones", expanded=True):
    st.markdown(
        """
- Responde cada ejercicio eligiendo **una** opci√≥n.
- La √∫ltima opci√≥n siempre es **‚ÄúNo s√©, no recuerdo‚Äù**.
- Al final, pulsa **Calificar** para ver tu porcentaje de aciertos.
- Convenciones usadas:
  - Naturales: 1, 2, 3, ‚Ä¶ (sin incluir el 0).
  - Enteros: ‚Ä¶, ‚àí2, ‚àí1, 0, 1, 2, ‚Ä¶
  - Racionales: pueden escribirse como fracci√≥n de enteros (incluye decimales finitos y peri√≥dicos).
  - Irracionales: decimales infinitos no peri√≥dicos.
        """
    )

st.subheader("Ejercicios")

# Render de preguntas
for idx, ej in enumerate(EXERCISES, start=1):
    st.markdown(f"**{idx}. ({ej['nivel']})** {ej['enunciado']}")
    opciones = shuffled_with_idk(ej["opciones3"])
    key = f"q_{idx}"

    # Mantener selecci√≥n previa
    if st.session_state.respuestas[idx - 1] is not None and st.session_state.respuestas[idx - 1] in opciones:
        default_index = opciones.index(st.session_state.respuestas[idx - 1])
    else:
        default_index = None

    seleccion = st.radio(
        label="Elige una opci√≥n:",
        options=opciones,
        index=default_index if default_index is not None else 0,
        key=key,
        horizontal=False,
    )
    # Guardar respuesta en estado
    st.session_state.respuestas[idx - 1] = seleccion

    st.markdown("---")

# Botones
cols = st.columns([1, 1, 2])
with cols[0]:
    calificar = st.button("‚úÖ Calificar", use_container_width=True)
with cols[1]:
    if st.button("üîÑ Reiniciar", use_container_width=True):
        st.session_state.respuestas = [None] * len(EXERCISES)
        st.session_state.calificado = False
        st.rerun()

# Calificaci√≥n
if calificar:
    correctas = 0
    detalles = []
    for i, ej in enumerate(EXERCISES):
        respuesta = st.session_state.respuestas[i]
        es_correcta = (respuesta == ej["correcta"])
        if es_correcta:
            correctas += 1
        detalles.append({
            "n": i + 1,
            "nivel": ej["nivel"],
            "enunciado": ej["enunciado"],
            "tu_respuesta": respuesta if respuesta is not None else "No respondida",
            "correcta": ej["correcta"],
            "acierto": "‚úîÔ∏è" if es_correcta else "‚ùå",
            "nota": ej["nota"]
        })

    total = len(EXERCISES)
    porcentaje = round(100 * correctas / total, 2)

    st.session_state.calificado = True

    st.success(f"Resultado: {correctas}/{total} aciertos ¬∑ **{porcentaje}%**")

    # Desglose por nivel
    niveles = {"muy f√°cil": [0, 0], "f√°cil": [0, 0], "para pensar": [0, 0]}  # [aciertos, total]
    for d in detalles:
        niveles[d["nivel"]][1] += 1
        if d["acierto"] == "‚úîÔ∏è":
            niveles[d["nivel"]][0] += 1

    with st.expander("Ver desglose por nivel"):
        for k, (a, t) in niveles.items():
            st.write(f"- {k.capitalize()}: {a}/{t} ({round(100*a/t, 1)}%)")

    # Tabla de retroalimentaci√≥n
    with st.expander("Revisar pregunta por pregunta"):
        for d in detalles:
            st.markdown(f"**{d['n']}. ({d['nivel']})** {d['enunciado']}")
            st.write(f"Tu respuesta: {d['tu_respuesta']}  {d['acierto']}")
            if d["acierto"] == "‚ùå":
                st.write(f"Respuesta correcta: **{d['correcta']}**")
            st.caption(d["nota"])
            st.markdown("---")
